module mul_test (
    input clk,  // clock
    input rst,  // reset
    input alu[8], // input from alu module
    input test[3],
    output testA[8], // test outputs to alu module
    output testB[8],
    output alufn[6],
    input reset // reset fsm to first state
  ) {

  // fsm for mul and div test cases
  fsm state(.clk(clk), .rst(rst)) = {MULTEST0, MULTEST1, MULTEST2, MULTEST3, DIVTEST0, DIVTEST1, END};
  dff counter[28](.clk(clk), .rst(rst));
  sig getNextState;
  sig resetFSM;
  
    
  always {
    
    testA = 0;
    testB = 0;
    alufn = 0;
    resetFSM = reset;
    
    // get next state counter
    counter.d = counter.q + 1;
    if (counter.q >= 28hffffff0) {
      getNextState = 1;
    } else {
      getNextState = 0;
    }
    
    case (state.q) {
    
      // mul
      state.MULTEST0:
        testA = 8h10;
        testB = 8h08;
        alufn = 6h02;
        
        if (getNextState == 1) {
          if (alu == 8h80 && test == 3h0) {
            state.d = state.MULTEST1;
          } 
        } else {
          state.d = state.MULTEST0;
        }
      
      // mul exceeding bit limit
      state.MULTEST1:
        testA = 8h10;
        testB = 8h10;
        alufn = 6h02;
        
        if (getNextState == 1) {
          if (alu == 8h00 && test == 3h0) {
            state.d = state.MULTEST2;
          } else if (resetFSM == 1) {
            state.d = state.MULTEST0;
          }  
        } else {
          state.d = state.MULTEST1;
        }
      
      // negatvie number mul test  
      state.MULTEST2:
        testA = 8hff;
        testB = 8h02;
        alufn = 6h02;
        
        if (getNextState == 1) {
          if (alu == 8hfe && test == 3h0) {
            state.d = state.MULTEST3;
          } else if (resetFSM == 1) {
            state.d = state.MULTEST0;
          }  
        } else {
          state.d = state.MULTEST2;
        }
      
      // mul test for negative with negative  
      state.MULTEST3:
        testA = 8hff;
        testB = 8hfe;
        alufn = 6h02;
        
        if (getNextState == 1) {
          if (alu == 8h02 && test == 3h1) {
            state.d = state.DIVTEST0;
          } else if (resetFSM == 1) {
            state.d = state.MULTEST0;
          }  
        } else {
          state.d = state.MULTEST3;
        }
      
      // positive div test case  
      state.DIVTEST0:
        testA = 8h10;
        testB = 8h04;
        alufn = 6h03;
        
        if (getNextState == 1) {
          if (alu == 8h04 && test == 3h0) {
            state.d = state.DIVTEST1;
          } else if (resetFSM == 1) {
            state.d = state.MULTEST0;
          }  
        } else {
          state.d = state.DIVTEST0;
        }
      
      // negative with negative div  
      state.DIVTEST1:
        testA = 8h80;
        testB = 8h80;
        alufn = 6h03;
        
        if (getNextState == 1) {
          if (alu == 8h01 && test == 3h4) {
            state.d = state.END;
          } else if (resetFSM == 1) {
            state.d = state.MULTEST0;
          }  
        } else {
          state.d = state.DIVTEST0;
        }
        
      state.END:
        testA = 8h00;
        testB = 8h00;
        alufn = 6h00;
        
        if (getNextState == 1) {
          if (resetFSM == 1) {
            state.d = state.MULTEST0;
          } 
        }
    }
  }
}
