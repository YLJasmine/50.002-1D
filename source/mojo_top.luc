module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig a[8];
  sig b[8];
  sig alufn[6];
  sig alu[8];
  sig mode;
  sig test[4];
  sig select[3];
  sig reset;
  sig cin;
  
  alu8 alu8test(.a(a), .b(b), .alufn(alufn), .cin(cin));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    //edge_detector edge_detector(#RISE(0), #FALL(1), .in(clk));
    
    .rst(rst){
      fsm mode_selector = {MANUAL, AUTO};
      multi_seven_seg seg;
      test_rig testRig(.alu(alu), .test(test), .reset(reset), .selector(select));
      
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = ~seg.seg;          // turn segments off
    io_sel = ~seg.sel;           // select no digits
    seg.values = {4hf, 4hf, 4hf, 4hf};
    mode = io_button[4];
    reset = io_button[0];
    
    
    alu = 0;
    io_led[2] = alu;
    
    case (mode_selector.q) {
      
      mode_selector.MANUAL:
        a = io_dip[0];
        b = io_dip[1];
        alufn = io_dip[2][5:0];
        cin = io_dip[2][7];
        alu = alu8test.alu;
        test = alu8test.test;
        test[3] = alu8test.cout;
        seg.values = {test, 4h0, alu[7:4], alu[3:0]};
        
        io_led[0] = a;
        io_led[1] = b;
        io_led[2] = alu;
        
        if (mode == 1) {
          mode_selector.d = mode_selector.AUTO;
        } else {
          mode_selector.d = mode_selector.MANUAL;
        }
      
      mode_selector.AUTO:
        a = testRig.testA;
        b = testRig.testB;
        alufn = testRig.alufn;
        cin = testRig.cin;
        
        alu = alu8test.alu ^ io_dip[0];
        test = alu8test.test;
        test[3] = alu8test.cout;
        select = io_dip[2][2:0];
        
        io_led[0] = a;
        io_led[1] = b;
        io_led[2][5:0] = alufn;
        seg.values = {test, 4h0, alu[7:4], alu[3:0]};
        
        
        if (mode == 1) {
          mode_selector.d = mode_selector.MANUAL;
        } else {
          mode_selector.d = mode_selector.AUTO;
        }
    }
  }
}