module test_rig (
    input clk,  // clock
    input rst,  // reset
    input alu[8], // input from alu module
    input test[4], // z, v, n, cin input from alu module
    input selector[3],
    output testA[8], // test outputs to alu module
    output testB[8],
    output alufn[6],
    output cin,
    input reset
  ) {

  sig select[3];
  sig pp[8];
  
  .clk(clk) {
  
    pipeline pp0(.in(alu[0]));
    pipeline pp1(.in(alu[1]));
    pipeline pp2(.in(alu[2]));
    pipeline pp3(.in(alu[3]));
    pipeline pp4(.in(alu[4]));
    pipeline pp5(.in(alu[5]));
    pipeline pp6(.in(alu[6]));
    pipeline pp7(.in(alu[7]));
      
    .rst(rst) {
      .alu(pp) {
        .reset(reset) {
          adder_test adderTest(.test(test[2:0]));
          mul_test mulTest(.test(test[2:0]));
          boole_test booleTest(.test(test[2:0]));
          shift_test shiftTest(.cout(test[3]));
          cmp_test cmpTest;
        } 
      }
    }
  }
  
  
  always {
    testA = 0;
    testB = 0;
    alufn = 0;
    cin = 0;
    select = selector;
    
    pp[0] = pp0.out;
    pp[1] = pp1.out;
    pp[2] = pp2.out;
    pp[3] = pp3.out;
    pp[4] = pp4.out;
    pp[5] = pp5.out;
    pp[6] = pp6.out;
    pp[7] = pp7.out;
    
    if (select == 3h0) {
      testA = adderTest.testA;
      testB = adderTest.testB;
      alufn = adderTest.alufn;  
    } else if (select == 3h1) {
      testA = mulTest.testA;
      testB = mulTest.testB;
      alufn = mulTest.alufn;
    } else if (select == 3h2) {
      testA = booleTest.testA;
      testB = booleTest.testB;
      alufn = booleTest.alufn;
    } else if (select == 3h3) {
      testA = shiftTest.testA;
      testB = shiftTest.testB;
      alufn = shiftTest.alufn;
      cin = shiftTest.cin;
    } else if (select == 3h4) {
      testA = cmpTest.testA;
      testB = cmpTest.testB;
      alufn = cmpTest.alufn;
    }
  }
}
