module adder_test (
    input clk,  // clock
    input rst,  // reset
    input test[3],
    input alu[8], // input from alu module
    output testA[8], // test outputs to alu module
    output testB[8],
    output alufn[6],
    input reset // reset fsm to first state
  ) {


  fsm state(.clk(clk), .rst(rst)) = {ADDTEST0, ADDTEST1, ADDTEST2, ADDTEST3, ADDTEST4, SUBTEST0, SUBTEST1, SUBTEST2, SUBTEST3, END}; 
  dff counter[28](.clk(clk), .rst(rst));
  sig getNextState;
  sig resetFSM;
  
  always {
    
    testA = 0;
    testB = 0;
    alufn = 0;
    resetFSM = reset;    
    
    counter.d = counter.q + 1;
    if (counter.q >= 28hffffff0) {
      getNextState = 1;
    } else {
      getNextState = 0;
    }
    
    case (state.q) {
    
      state.ADDTEST0:
        testA = 8h01;
        testB = 8h01;
        alufn = 6h00;
      
        if (getNextState == 1) {
          if (alu == 8h02 && test == 3h0) {
            state.d = state.ADDTEST1;
          } 
        } else {
          state.d = state.ADDTEST0;
        }
        
      state.ADDTEST1:
        testA = 8h7f;
        testB = 8h7f;
        alufn = 6h00;
      
        if (getNextState == 1) {
          if (alu == 8hfe && test == 3h3) {
            state.d = state.ADDTEST2;
          } else if (resetFSM == 1) {
            state.d = state.ADDTEST0;
          } 
        } else {
          state.d = state.ADDTEST1;
        }  
        
      state.ADDTEST2:
        testA = 8h7f;
        testB = 8h80;
        alufn = 6h00;
      
        if (getNextState == 1) {
          if (alu == 8hff && test == 3h1) {
            state.d = state.ADDTEST3;
          } else if (resetFSM == 1) {
            state.d = state.ADDTEST0;
          } 
        } else {
          state.d = state.ADDTEST2;
        } 
        
      state.ADDTEST3:
        testA = 8h80;
        testB = 8h7f;
        alufn = 6h00;
      
        if (getNextState == 1) {
          if (alu == 8hff && test == 3h1) {
            state.d = state.ADDTEST4;
          } else if (resetFSM == 1) {
            state.d = state.ADDTEST0;
          } 
        } else {
          state.d = state.ADDTEST3;
        } 
        
      state.ADDTEST4:
        testA = 8h80;
        testB = 8h80;
        alufn = 6h00;
        
        if (getNextState == 1) {
          if (alu == 8h00 & test == 3h6) {
            state.d = state.ADDTEST4;  
          } else if (resetFSM == 1) {
            state.d = state.ADDTEST0;
          }
        } else {
          state.d = state.SUBTEST0;
        }
        
      state.SUBTEST0:
        testA = 8h01;
        testB = 8h01;
        alufn = 6h01;
        
        if (getNextState == 1) {
          if (alu == 8h00 && test == 3h4) {
            state.d = state.SUBTEST1;
          } else if (resetFSM == 1) {
            state.d = state.ADDTEST0;
          }
        } else {
          state.d = state.SUBTEST0;
        }
        
      state.SUBTEST1:
        testA = 8h7f;
        testB = 8h7f;
        alufn = 6h01;
        
        if (getNextState == 1) {
          if (alu == 8h00 && test == 3h4) {
            state.d = state.SUBTEST2;
          } else if (resetFSM == 1) {
            state.d = state.ADDTEST0;
          }
        } else {
          state.d = state.SUBTEST1;
        }
        
      state.SUBTEST2:
        testA = 8h7f;
        testB = 8h80;
        alufn = 6h01;
        
        if (getNextState == 1) {
          if (alu == 8hff && test == 3h3) {
            state.d = state.SUBTEST3;
          } else if (resetFSM == 1) {
            state.d = state.ADDTEST0;
          }
        } else {
          state.d = state.SUBTEST2;
        }
        
      state.SUBTEST3:
        testA = 8h80;
        testB = 8h7f;
        alufn = 6h01;
        
        if (getNextState == 1) {
          if (alu == 8h01 && test == 3h2) {
            state.d = state.END;
          } else if (resetFSM == 1) {
            state.d = state.ADDTEST0;
          }
        } else {
          state.d = state.END;
        }
        
      state.END:
        testA = 8h00;
        testB = 8h00;
        alufn = 6h00;
        
        if (getNextState == 1) {
          if (resetFSM == 1) {
            state.d = state.ADDTEST0;
          }
        }
    }
  }
}
