/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module adder_test_21 (
    input clk,
    input rst,
    input [2:0] test,
    input [7:0] alu,
    output reg [7:0] testA,
    output reg [7:0] testB,
    output reg [5:0] alufn,
    input reset
  );
  
  
  
  
  localparam ADDTEST0_state = 4'd0;
  localparam ADDTEST1_state = 4'd1;
  localparam ADDTEST2_state = 4'd2;
  localparam ADDTEST3_state = 4'd3;
  localparam ADDTEST4_state = 4'd4;
  localparam SUBTEST0_state = 4'd5;
  localparam SUBTEST1_state = 4'd6;
  localparam SUBTEST2_state = 4'd7;
  localparam SUBTEST3_state = 4'd8;
  localparam END_state = 4'd9;
  
  reg [3:0] M_state_d, M_state_q = ADDTEST0_state;
  
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  
  reg getNextState;
  
  reg resetFSM;
  
  reg [7:0] aluTest;
  
  reg [2:0] testTest;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    testA = 1'h0;
    testB = 1'h0;
    alufn = 1'h0;
    aluTest = alu;
    testTest = test;
    resetFSM = reset;
    M_counter_d = M_counter_q + 1'h1;
    if (M_counter_q >= 28'hffffff0) begin
      getNextState = 1'h1;
    end else begin
      getNextState = 1'h0;
    end
    
    case (M_state_q)
      ADDTEST0_state: begin
        testA = 8'h01;
        testB = 8'h01;
        alufn = 6'h00;
        if (getNextState == 1'h1) begin
          if (aluTest == 8'h02 && testTest == 3'h0) begin
            M_state_d = ADDTEST1_state;
          end
        end else begin
          M_state_d = ADDTEST0_state;
        end
      end
      ADDTEST1_state: begin
        testA = 8'h7f;
        testB = 8'h7f;
        alufn = 6'h00;
        if (getNextState == 1'h1) begin
          if (alu == 8'hfe && test == 3'h3) begin
            M_state_d = ADDTEST2_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = ADDTEST0_state;
            end
          end
        end else begin
          M_state_d = ADDTEST1_state;
        end
      end
      ADDTEST2_state: begin
        testA = 8'h7f;
        testB = 8'h80;
        alufn = 6'h00;
        if (getNextState == 1'h1) begin
          if (alu == 8'hff && test == 3'h1) begin
            M_state_d = ADDTEST3_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = ADDTEST0_state;
            end
          end
        end else begin
          M_state_d = ADDTEST2_state;
        end
      end
      ADDTEST3_state: begin
        testA = 8'h80;
        testB = 8'h7f;
        alufn = 6'h00;
        if (getNextState == 1'h1) begin
          if (alu == 8'hff && test == 3'h1) begin
            M_state_d = ADDTEST4_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = ADDTEST0_state;
            end
          end
        end else begin
          M_state_d = ADDTEST3_state;
        end
      end
      ADDTEST4_state: begin
        testA = 8'h80;
        testB = 8'h80;
        alufn = 6'h00;
        if (getNextState == 1'h1) begin
          if (alu == 8'h00 & test == 3'h6) begin
            M_state_d = ADDTEST4_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = ADDTEST0_state;
            end
          end
        end else begin
          M_state_d = SUBTEST0_state;
        end
      end
      SUBTEST0_state: begin
        testA = 8'h01;
        testB = 8'h01;
        alufn = 6'h01;
        if (getNextState == 1'h1) begin
          if (alu == 8'h00 && test == 3'h4) begin
            M_state_d = SUBTEST1_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = ADDTEST0_state;
            end
          end
        end else begin
          M_state_d = SUBTEST0_state;
        end
      end
      SUBTEST1_state: begin
        testA = 8'h7f;
        testB = 8'h7f;
        alufn = 6'h01;
        if (getNextState == 1'h1) begin
          if (alu == 8'h00 && test == 3'h4) begin
            M_state_d = SUBTEST2_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = ADDTEST0_state;
            end
          end
        end else begin
          M_state_d = SUBTEST1_state;
        end
      end
      SUBTEST2_state: begin
        testA = 8'h7f;
        testB = 8'h80;
        alufn = 6'h01;
        if (getNextState == 1'h1) begin
          if (alu == 8'hff && test == 3'h3) begin
            M_state_d = SUBTEST3_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = ADDTEST0_state;
            end
          end
        end else begin
          M_state_d = SUBTEST2_state;
        end
      end
      SUBTEST3_state: begin
        testA = 8'h80;
        testB = 8'h7f;
        alufn = 6'h01;
        if (getNextState == 1'h1) begin
          if (alu == 8'h01 && test == 3'h2) begin
            M_state_d = END_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = ADDTEST0_state;
            end
          end
        end else begin
          M_state_d = END_state;
        end
      end
      END_state: begin
        testA = 8'h00;
        testB = 8'h00;
        alufn = 6'h00;
        if (getNextState == 1'h1) begin
          if (resetFSM == 1'h1) begin
            M_state_d = ADDTEST0_state;
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
