/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [5:0] alufn;
  
  reg [7:0] alu;
  
  reg mode;
  
  reg [3:0] test;
  
  reg [2:0] select;
  
  reg reset;
  
  reg cin;
  
  wire [8-1:0] M_alu8test_alu;
  wire [3-1:0] M_alu8test_test;
  wire [1-1:0] M_alu8test_cout;
  alu8_1 alu8test (
    .a(a),
    .b(b),
    .alufn(alufn),
    .cin(cin),
    .alu(M_alu8test_alu),
    .test(M_alu8test_test),
    .cout(M_alu8test_cout)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam MANUAL_mode_selector = 1'd0;
  localparam AUTO_mode_selector = 1'd1;
  
  reg M_mode_selector_d, M_mode_selector_q = MANUAL_mode_selector;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_3 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [8-1:0] M_testRig_testA;
  wire [8-1:0] M_testRig_testB;
  wire [6-1:0] M_testRig_alufn;
  wire [1-1:0] M_testRig_cin;
  test_rig_4 testRig (
    .clk(clk),
    .rst(rst),
    .alu(alu),
    .test(test),
    .reset(reset),
    .selector(select),
    .testA(M_testRig_testA),
    .testB(M_testRig_testB),
    .alufn(M_testRig_alufn),
    .cin(M_testRig_cin)
  );
  
  always @* begin
    M_mode_selector_d = M_mode_selector_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_seg_values = 16'hffff;
    mode = io_button[4+0-:1];
    reset = io_button[0+0-:1];
    alu = 1'h0;
    io_led[16+7-:8] = alu;
    
    case (M_mode_selector_q)
      MANUAL_mode_selector: begin
        a = io_dip[0+7-:8];
        b = io_dip[8+7-:8];
        alufn = io_dip[16+0+5-:6];
        cin = io_dip[16+7+0-:1];
        alu = M_alu8test_alu;
        test = M_alu8test_test;
        test[3+0-:1] = M_alu8test_cout;
        M_seg_values = {test, 4'h0, alu[4+3-:4], alu[0+3-:4]};
        io_led[0+7-:8] = a;
        io_led[8+7-:8] = b;
        io_led[16+7-:8] = alu;
        if (mode == 1'h1) begin
          M_mode_selector_d = AUTO_mode_selector;
        end else begin
          M_mode_selector_d = MANUAL_mode_selector;
        end
      end
      AUTO_mode_selector: begin
        a = M_testRig_testA;
        b = M_testRig_testB;
        alufn = M_testRig_alufn;
        cin = M_testRig_cin;
        alu = M_alu8test_alu;
        test = M_alu8test_test;
        test[3+0-:1] = M_alu8test_cout;
        select = io_dip[16+0+2-:3];
        io_led[0+7-:8] = a;
        io_led[8+7-:8] = b;
        io_led[16+0+5-:6] = alufn;
        M_seg_values = {test, 4'h0, alu[4+3-:4], alu[0+3-:4]};
        if (mode == 1'h1) begin
          M_mode_selector_d = MANUAL_mode_selector;
        end else begin
          M_mode_selector_d = AUTO_mode_selector;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_mode_selector_q <= 1'h0;
    end else begin
      M_mode_selector_q <= M_mode_selector_d;
    end
  end
  
endmodule
