/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module shift_test_23 (
    input clk,
    input rst,
    input [7:0] alu,
    output reg [7:0] testA,
    output reg [7:0] testB,
    output reg [5:0] alufn,
    output reg cin,
    input cout,
    input reset
  );
  
  
  
  
  localparam SHLTEST0_state = 4'd0;
  localparam SHLTEST1_state = 4'd1;
  localparam SHRTEST0_state = 4'd2;
  localparam SHRTEST1_state = 4'd3;
  localparam SRATEST0_state = 4'd4;
  localparam SRATEST1_state = 4'd5;
  localparam RLTEST0_state = 4'd6;
  localparam RRTEST0_state = 4'd7;
  localparam RLCTEST0_state = 4'd8;
  localparam RLCTEST1_state = 4'd9;
  localparam RRCTEST0_state = 4'd10;
  localparam RRCTEST1_state = 4'd11;
  localparam END_state = 4'd12;
  
  reg [3:0] M_state_d, M_state_q = SHLTEST0_state;
  
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  
  reg getNextState;
  
  reg resetFSM;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    testA = 1'h0;
    testB = 1'h0;
    alufn = 1'h0;
    cin = 1'h0;
    resetFSM = reset;
    M_counter_d = M_counter_q + 1'h1;
    if (M_counter_q >= 28'hffffff0) begin
      getNextState = 1'h1;
    end else begin
      getNextState = 1'h0;
    end
    
    case (M_state_q)
      SHLTEST0_state: begin
        testA = 8'haa;
        testB = 8'h02;
        alufn = 6'h20;
        if (getNextState == 1'h1) begin
          if (alu == 8'ha8) begin
            M_state_d = SHLTEST1_state;
          end
        end else begin
          M_state_d = SHLTEST0_state;
        end
      end
      SHLTEST1_state: begin
        testA = 8'h55;
        testB = 8'h07;
        alufn = 6'h20;
        if (getNextState == 1'h1) begin
          if (alu == 8'h80) begin
            M_state_d = SHRTEST0_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = SHLTEST0_state;
            end
          end
        end else begin
          M_state_d = SHLTEST1_state;
        end
      end
      SHRTEST0_state: begin
        testA = 8'haa;
        testB = 8'h07;
        alufn = 6'h21;
        if (getNextState == 1'h1) begin
          if (alu == 8'h01) begin
            M_state_d = SHRTEST1_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = SHLTEST0_state;
            end
          end
        end else begin
          M_state_d = SHRTEST0_state;
        end
      end
      SHRTEST1_state: begin
        testA = 8'h55;
        testB = 8'h02;
        alufn = 6'h21;
        if (getNextState == 1'h1) begin
          if (alu == 8'h15) begin
            M_state_d = SRATEST0_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = SHLTEST0_state;
            end
          end
        end else begin
          M_state_d = SHRTEST1_state;
        end
      end
      SRATEST0_state: begin
        testA = 8'haa;
        testB = 8'h02;
        alufn = 6'h23;
        if (getNextState == 1'h1) begin
          if (alu == 8'hea) begin
            M_state_d = SRATEST1_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = SHLTEST0_state;
            end
          end
        end else begin
          M_state_d = SRATEST0_state;
        end
      end
      SRATEST1_state: begin
        testA = 8'h55;
        testB = 8'h07;
        alufn = 6'h23;
        if (getNextState == 1'h1) begin
          if (alu == 8'h00) begin
            M_state_d = RLTEST0_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = SHLTEST0_state;
            end
          end
        end else begin
          M_state_d = SRATEST1_state;
        end
      end
      RLTEST0_state: begin
        testA = 8'h81;
        testB = 1'h0;
        alufn = 6'h24;
        if (getNextState == 1'h1) begin
          if (alu == 8'h03) begin
            M_state_d = RRTEST0_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = SHLTEST0_state;
            end
          end
        end else begin
          M_state_d = RLTEST0_state;
        end
      end
      RRTEST0_state: begin
        testA = 8'h81;
        testB = 1'h0;
        alufn = 6'h25;
        if (getNextState == 1'h1) begin
          if (alu == 8'hc0) begin
            M_state_d = RLCTEST0_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = SHLTEST0_state;
            end
          end
        end else begin
          M_state_d = RRTEST0_state;
        end
      end
      RLCTEST0_state: begin
        testA = 8'h81;
        testB = 1'h0;
        alufn = 6'h2c;
        cin = 1'h0;
        if (getNextState == 1'h1) begin
          if (alu == 8'h02 && cout == 1'h1) begin
            M_state_d = RLCTEST1_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = SHLTEST0_state;
            end
          end
        end else begin
          M_state_d = RLCTEST0_state;
        end
      end
      RLCTEST1_state: begin
        testA = 8'h81;
        testB = 1'h0;
        alufn = 6'h2c;
        cin = 1'h1;
        if (getNextState == 1'h1) begin
          if (alu == 8'h03 && cout == 1'h1) begin
            M_state_d = RRCTEST0_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = SHLTEST0_state;
            end
          end
        end else begin
          M_state_d = RLCTEST1_state;
        end
      end
      RRCTEST0_state: begin
        testA = 8'h81;
        testB = 1'h0;
        alufn = 6'h2d;
        cin = 1'h0;
        if (getNextState == 1'h1) begin
          if (alu == 8'h40 && cout == 1'h1) begin
            M_state_d = RRCTEST1_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = SHLTEST0_state;
            end
          end
        end else begin
          M_state_d = RRCTEST0_state;
        end
      end
      RRCTEST1_state: begin
        testA = 8'h81;
        testB = 1'h0;
        alufn = 6'h2d;
        cin = 1'h1;
        if (getNextState == 1'h1) begin
          if (alu == 8'hc0 && cout == 1'h1) begin
            M_state_d = END_state;
          end else begin
            if (resetFSM == 1'h1) begin
              M_state_d = SHLTEST0_state;
            end
          end
        end else begin
          M_state_d = RRCTEST1_state;
        end
      end
      END_state: begin
        testA = 8'h00;
        testB = 8'h00;
        alufn = 6'h00;
        if (getNextState == 1'h1) begin
          if (resetFSM == 1'h1) begin
            M_state_d = SHLTEST0_state;
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
