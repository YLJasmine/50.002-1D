/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module test_rig_5 (
    input clk,
    input rst,
    input [7:0] alu,
    input [2:0] test,
    input [2:0] selector,
    output reg [7:0] testA,
    output reg [7:0] testB,
    output reg [5:0] alufn,
    input reset
  );
  
  
  
  reg [2:0] select;
  
  reg [7:0] pp;
  
  wire [1-1:0] M_pp0_out;
  pipeline_13 pp0 (
    .clk(clk),
    .in(alu[0+0-:1]),
    .out(M_pp0_out)
  );
  wire [1-1:0] M_pp1_out;
  pipeline_13 pp1 (
    .clk(clk),
    .in(alu[1+0-:1]),
    .out(M_pp1_out)
  );
  wire [1-1:0] M_pp2_out;
  pipeline_13 pp2 (
    .clk(clk),
    .in(alu[2+0-:1]),
    .out(M_pp2_out)
  );
  wire [1-1:0] M_pp3_out;
  pipeline_13 pp3 (
    .clk(clk),
    .in(alu[3+0-:1]),
    .out(M_pp3_out)
  );
  wire [1-1:0] M_pp4_out;
  pipeline_13 pp4 (
    .clk(clk),
    .in(alu[4+0-:1]),
    .out(M_pp4_out)
  );
  wire [1-1:0] M_pp5_out;
  pipeline_13 pp5 (
    .clk(clk),
    .in(alu[5+0-:1]),
    .out(M_pp5_out)
  );
  wire [1-1:0] M_pp6_out;
  pipeline_13 pp6 (
    .clk(clk),
    .in(alu[6+0-:1]),
    .out(M_pp6_out)
  );
  wire [1-1:0] M_pp7_out;
  pipeline_13 pp7 (
    .clk(clk),
    .in(alu[7+0-:1]),
    .out(M_pp7_out)
  );
  wire [8-1:0] M_adderTest_testA;
  wire [8-1:0] M_adderTest_testB;
  wire [6-1:0] M_adderTest_alufn;
  adder_test_21 adderTest (
    .clk(clk),
    .rst(rst),
    .alu(pp),
    .reset(reset),
    .test(test),
    .testA(M_adderTest_testA),
    .testB(M_adderTest_testB),
    .alufn(M_adderTest_alufn)
  );
  wire [8-1:0] M_mulTest_testA;
  wire [8-1:0] M_mulTest_testB;
  wire [6-1:0] M_mulTest_alufn;
  mul_test_22 mulTest (
    .clk(clk),
    .rst(rst),
    .alu(pp),
    .reset(reset),
    .test(test),
    .testA(M_mulTest_testA),
    .testB(M_mulTest_testB),
    .alufn(M_mulTest_alufn)
  );
  wire [8-1:0] M_booleTest_testA;
  wire [8-1:0] M_booleTest_testB;
  wire [6-1:0] M_booleTest_alufn;
  boole_test_23 booleTest (
    .clk(clk),
    .rst(rst),
    .alu(pp),
    .reset(reset),
    .test(test),
    .testA(M_booleTest_testA),
    .testB(M_booleTest_testB),
    .alufn(M_booleTest_alufn)
  );
  wire [8-1:0] M_shiftTest_testA;
  wire [8-1:0] M_shiftTest_testB;
  wire [6-1:0] M_shiftTest_alufn;
  shift_test_24 shiftTest (
    .clk(clk),
    .rst(rst),
    .alu(pp),
    .reset(reset),
    .testA(M_shiftTest_testA),
    .testB(M_shiftTest_testB),
    .alufn(M_shiftTest_alufn)
  );
  wire [8-1:0] M_cmpTest_testA;
  wire [8-1:0] M_cmpTest_testB;
  wire [6-1:0] M_cmpTest_alufn;
  cmp_test_25 cmpTest (
    .clk(clk),
    .rst(rst),
    .alu(pp),
    .reset(reset),
    .testA(M_cmpTest_testA),
    .testB(M_cmpTest_testB),
    .alufn(M_cmpTest_alufn)
  );
  
  always @* begin
    testA = 1'h0;
    testB = 1'h0;
    alufn = 1'h0;
    select = selector;
    pp[0+0-:1] = M_pp0_out;
    pp[1+0-:1] = M_pp1_out;
    pp[2+0-:1] = M_pp2_out;
    pp[3+0-:1] = M_pp3_out;
    pp[4+0-:1] = M_pp4_out;
    pp[5+0-:1] = M_pp5_out;
    pp[6+0-:1] = M_pp6_out;
    pp[7+0-:1] = M_pp7_out;
    if (select == 3'h0) begin
      testA = M_adderTest_testA;
      testB = M_adderTest_testB;
      alufn = M_adderTest_alufn;
    end else begin
      if (select == 3'h1) begin
        testA = M_mulTest_testA;
        testB = M_mulTest_testB;
        alufn = M_mulTest_alufn;
      end else begin
        if (select == 3'h2) begin
          testA = M_booleTest_testA;
          testB = M_booleTest_testB;
          alufn = M_booleTest_alufn;
        end else begin
          if (select == 3'h3) begin
            testA = M_shiftTest_testA;
            testB = M_shiftTest_testB;
            alufn = M_shiftTest_alufn;
          end else begin
            if (select == 3'h4) begin
              testA = M_cmpTest_testA;
              testB = M_cmpTest_testB;
              alufn = M_cmpTest_alufn;
            end
          end
        end
      end
    end
  end
endmodule
